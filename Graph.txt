using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Azure.Identity;
using Microsoft.Graph;
using Microsoft.Graph.Models;

namespace GraphProfileImage
{
    class Program
    {
        private const string tenantId = "YOUR_TENANT_ID"; // Directory (tenant) ID
        private const string clientId = "YOUR_CLIENT_ID"; // Application (client) ID
        private const string clientSecret = "YOUR_CLIENT_SECRET_VALUE"; // The actual secret value
        private const string userEmail = "USER_EMAIL_ADDRESS"; // The user's email address

        static async Task Main(string[] args)
        {
            try
            {
                string accessToken = await GetAccessTokenAsync();

                if (!string.IsNullOrEmpty(accessToken))
                {
                    string userId = await GetUserIdByEmailAsync(accessToken, userEmail);

                    if (!string.IsNullOrEmpty(userId))
                    {
                        await GetProfilePhotoAsync(accessToken, userId);
                    }
                    else
                    {
                        Console.WriteLine("User not found.");
                    }
                }
                else
                {
                    Console.WriteLine("Failed to obtain access token.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
        }

        private static async Task<string> GetAccessTokenAsync()
        {
            var clientSecretCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);
            var tokenRequestContext = new TokenRequestContext(new[] { "https://graph.microsoft.com/.default" });

            try
            {
                var tokenResponse = await clientSecretCredential.GetTokenAsync(tokenRequestContext);
                return tokenResponse.Token;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error acquiring access token: {ex.Message}");
                return null;
            }
        }

        private static async Task<string> GetUserIdByEmailAsync(string accessToken, string email)
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                var response = await httpClient.GetAsync($"https://graph.microsoft.com/v1.0/users?$filter=userPrincipalName eq '{email}'");

                if (response.IsSuccessStatusCode)
                {
                    var userResponse = await response.Content.ReadAsAsync<UserListResponse>();

                    if (userResponse.Value.Count > 0)
                    {
                        return userResponse.Value[0].Id;
                    }
                }
                else
                {
                    Console.WriteLine($"Failed to retrieve user. Status code: {response.StatusCode}");
                }
            }

            return null;
        }

        private static async Task GetProfilePhotoAsync(string accessToken, string userId)
        {
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                var response = await httpClient.GetAsync($"https://graph.microsoft.com/v1.0/users/{userId}/photo/$value");

                if (response.IsSuccessStatusCode)
                {
                    using (var fileStream = new System.IO.FileStream("profileImage.jpg", System.IO.FileMode.Create, System.IO.FileAccess.Write))
                    {
                        await response.Content.CopyToAsync(fileStream);
                    }

                    Console.WriteLine("Profile image saved successfully.");
                }
                else
                {
                    Console.WriteLine($"Failed to retrieve profile photo. Status code: {response.StatusCode}");
                }
            }
        }
    }

    public class UserListResponse
    {
        public List<User> Value { get; set; }
    }

    public class User
    {
        public string Id { get; set; }
        public string DisplayName { get; set; }
        public string UserPrincipalName { get; set; }
    }
}
