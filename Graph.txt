using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Graph;
using Microsoft.Graph.Models;
using Azure.Identity;

namespace GraphProfileImage
{
    class Program
    {
        private const string tenantId = "YOUR_TENANT_ID";
        private const string clientId = "YOUR_APPLICATION_ID";
        private const string clientSecret = "YOUR_CLIENT_SECRET";
        private const string userDisplayName = "USER_DISPLAY_NAME"; // Replace with the user's display name

        static async Task Main(string[] args)
        {
            var graphClient = GetAuthenticatedGraphClient();
            var user = await GetUserByDisplayNameAsync(graphClient, userDisplayName);

            if (user != null)
            {
                var photoStream = await graphClient.Users[user.Id].Photo.Content.GetAsync();

                using (var fileStream = new FileStream("profileImage.jpg", FileMode.Create, FileAccess.Write))
                {
                    await photoStream.CopyToAsync(fileStream);
                }

                Console.WriteLine("Profile image saved successfully.");
            }
            else
            {
                Console.WriteLine("User not found.");
            }
        }

        private static GraphServiceClient GetAuthenticatedGraphClient()
        {
            var clientSecretCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);

            return new GraphServiceClient(clientSecretCredential, new[] { "https://graph.microsoft.com/.default" });
        }

        private static async Task<User> GetUserByDisplayNameAsync(GraphServiceClient graphClient, string displayName)
        {
            var users = await graphClient.Users
                .GetAsync(requestConfiguration =>
                {
                    requestConfiguration.QueryParameters.Filter = $"startswith(displayName, '{displayName}')";
                });

            if (users.Value.Count > 0)
            {
                Console.WriteLine($"Found {users.Value.Count} user(s) with display name starting with '{displayName}':");
                foreach (var user in users.Value)
                {
                    Console.WriteLine($"- {user.DisplayName} ({user.Id})");
                }

                // Return the first user that matches the display name exactly
                return users.Value.FirstOrDefault(u => u.DisplayName.Equals(displayName, StringComparison.OrdinalIgnoreCase));
            }

            Console.WriteLine($"No users found with display name starting with '{displayName}'");
            return null;
        }
    }
}
