using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

public class BatchDirectoryMover
{
    private readonly string sourceRootPath;
    private readonly string destinationRootPath;
    private readonly int maxParallelTransfers;

    public BatchDirectoryMover(string sourceRootPath, string destinationRootPath, int maxParallelTransfers)
    {
        if (string.IsNullOrWhiteSpace(sourceRootPath) || string.IsNullOrWhiteSpace(destinationRootPath))
        {
            throw new ArgumentException("Source and destination paths must not be empty.");
        }

        this.sourceRootPath = sourceRootPath;
        this.destinationRootPath = destinationRootPath;
        this.maxParallelTransfers = maxParallelTransfers > 0 ? maxParallelTransfers : throw new ArgumentException("Max parallel transfers must be greater than zero.");
    }

    /// <summary>
    /// Moves the provided list of batch directories from the source to the destination.
    /// </summary>
    /// <param name="batchDirectories">List of batch directories to move (e.g., batch_001, batch_002)</param>
    public async Task MoveBatchDirectoriesAsync(List<string> batchDirectories)
    {
        if (batchDirectories == null || batchDirectories.Count == 0)
        {
            throw new ArgumentException("The list of batch directories must not be null or empty.");
        }

        // Create a list to track the transfer tasks
        List<Task> transferTasks = new List<Task>();

        foreach (var batchDirectory in batchDirectories)
        {
            string sourceBatchPath = Path.Combine(sourceRootPath, batchDirectory);
            string destinationBatchPath = Path.Combine(destinationRootPath, batchDirectory);

            // Check if we've reached the max number of parallel transfers
            if (transferTasks.Count >= maxParallelTransfers)
            {
                // Wait for one of the tasks to complete before starting new ones
                Task completedTask = await Task.WhenAny(transferTasks);
                transferTasks.Remove(completedTask);
            }

            // Start a new task to move the batch directory
            transferTasks.Add(Task.Run(() => MoveDirectory(sourceBatchPath, destinationBatchPath)));
        }

        // Wait for all remaining tasks to complete
        await Task.WhenAll(transferTasks);
    }

    /// <summary>
    /// Moves a single batch directory from the source path to the destination path.
    /// </summary>
    /// <param name="sourcePath">The source directory path.</param>
    /// <param name="destinationPath">The destination directory path.</param>
    private void MoveDirectory(string sourcePath, string destinationPath)
    {
        try
        {
            // Check if the source directory exists
            if (!Directory.Exists(sourcePath))
            {
                throw new DirectoryNotFoundException($"Source directory '{sourcePath}' does not exist.");
            }

            // Check if the destination directory already exists
            if (Directory.Exists(destinationPath))
            {
                throw new IOException($"Destination directory '{destinationPath}' already exists.");
            }

            // Move the directory
            Directory.Move(sourcePath, destinationPath);
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Error moving directory '{sourcePath}' to '{destinationPath}': {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Collects all subdirectory names from the provided path and returns them as a List<string>.
    /// </summary>
    /// <param name="directoryPath">The directory from which to collect subdirectories.</param>
    /// <returns>A List of subdirectory names.</returns>
    public List<string> GetBatchDirectories(string directoryPath)
    {
        if (!Directory.Exists(directoryPath))
        {
            throw new DirectoryNotFoundException($"The directory '{directoryPath}' does not exist.");
        }

        // Get all subdirectories in the provided directory path
        var subdirectories = Directory.GetDirectories(directoryPath);

        // Extract only the directory names (not the full path)
        var batchDirectoryNames = new List<string>();
        foreach (var subdirectory in subdirectories)
        {
            batchDirectoryNames.Add(Path.GetFileName(subdirectory));
        }

        return batchDirectoryNames;
    }
}
