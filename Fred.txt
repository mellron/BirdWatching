using System;
using System.IO;
using PdfSharpCore.Pdf;
using PdfSharpCore.Pdf.IO;

namespace util
{
    public static class PdfUtil
    {
        // Static variable to hold the loaded PDF document
        private static PdfDocument originalDocument = null;

        // Static variable to hold the currently loaded PDF filename
        private static string currentPdfFilename = string.Empty;

        // Lock object for thread safety
        private static readonly object lockObj = new object();

        /// <summary>
        /// Saves a specific page from the input PDF file to a new PDF using PdfSharpCore, and re-loads the file if the filename changes.
        /// </summary>
        /// <param name="inputPdfPath">Path to the input PDF file</param>
        /// <param name="outputPath">Directory to save the new PDF</param>
        /// <param name="filename">Name of the output PDF file</param>
        /// <param name="pageNumber">Page number to extract and save</param>
        public static void SavePageAsPdf(string inputPdfPath, string outputPath, string filename, int pageNumber)
        {
            try
            {


                // Combine the output path and filename
                string fullPath = Path.Combine(outputPath, filename);

                // Thread-safe check and load the PDF only if the filename has changed or the document is not loaded
                lock (lockObj)
                {
                    // If the filename is different or the document is null, reload the PDF
                    if (originalDocument == null || !string.Equals(currentPdfFilename, inputPdfPath, StringComparison.OrdinalIgnoreCase))
                    {
                        // Dispose of the old document if it exists
                        originalDocument?.Dispose();

                         // Ensure the output directory exists
                        Directory.CreateDirectory(outputPath);

                        // Load the new PDF document
                        originalDocument = PdfReader.Open(inputPdfPath, PdfDocumentOpenMode.Import);

                        currentPdfFilename = inputPdfPath; // Update the current filename

                    }
                }

                // Create a new PDF document for the output
                using (PdfDocument newDocument = new PdfDocument())
                {
                    // Ensure the requested page number is valid
                    if (pageNumber > 0 && pageNumber <= originalDocument.PageCount)
                    {
                        // Add the specified page to the new document
                        newDocument.AddPage(originalDocument.Pages[pageNumber - 1]);

                        // Save the new PDF document to the specified file
                        newDocument.Save(fullPath);

                        Console.WriteLine($"Page {pageNumber} saved as {fullPath}");
                    }
                    else
                    {
                        throw new ArgumentOutOfRangeException(nameof(pageNumber), "Page number is out of range.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
        }
    }
}
