using System;
using System.Collections.Generic;
using System.IO;
using UglyToad.PdfPig.Writer;
using UglyToad.PdfPig.Content;

namespace util
{
    public static class PdfUtil
    {
        /// <summary>
        /// Saves the specified page as a new PDF using PdfPig.Writer
        /// </summary>
        /// <param name="page">The page to save</param>
        /// <param name="outputPath">The directory where the new PDF should be saved</param>
        /// <param name="filename">The name of the new PDF file</param>
        public static void SavePageAsPdf(Page page, string outputPath, string filename)
        {
            try
            {
                // Ensure the output directory exists
                Directory.CreateDirectory(outputPath);

                // Combine the output path and filename
                string fullPath = Path.Combine(outputPath, filename);

                // Create a memory stream to hold the new PDF
                using MemoryStream stream = new MemoryStream();

                // Create a new PDF using PdfPig's PdfDocumentBuilder
                var pdfBuilder = new PdfDocumentBuilder();

                // Add the page as a new page to the PdfDocumentBuilder
                var builderPage = pdfBuilder.AddPage(page.Width, page.Height);

                // Copy the content of the original page
                foreach (var word in page.GetWords())
                {
                    builderPage.AddText(word.Text, new PdfPoint(word.BoundingBox.Left, word.BoundingBox.Bottom), fontSize: 12);
                }

                // Save the new PDF to the stream
                pdfBuilder.Save(stream);

                // Write the stream to a file
                File.WriteAllBytes(fullPath, stream.ToArray());

                Console.WriteLine($"Page saved as {fullPath}");
            }
            catch (DirectoryNotFoundException ex)
            {
                Console.WriteLine($"Error: Directory not found - {ex.Message}");
                throw new Exception("Failed to create or access the specified directory.", ex);
            }
            catch (IOException ex)
            {
                Console.WriteLine($"Error: I/O error occurred - {ex.Message}");
                throw new Exception("Failed to save the PDF file due to an I/O error.", ex);
            }
            catch (UnauthorizedAccessException ex)
            {
                Console.WriteLine($"Error: Unauthorized access - {ex.Message}");
                throw new Exception("Failed to save the PDF file due to insufficient permissions.", ex);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: An unexpected error occurred - {ex.Message}");
                throw new Exception("An unexpected error occurred while saving the PDF file.", ex);
            }
        }
    }
}
