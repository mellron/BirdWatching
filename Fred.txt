public class Person
{
    public int PersonID { get; set; }
    public string PreferredID { get; set; }
    public string FirstNM { get; set; }
    public string LastNM { get; set; }
    public string JobTitle { get; set; }
}

public class OrgChart
{
    public Person SelectedPerson { get; set; }
    public List<Person> Managers { get; set; } = new List<Person>();
    public List<Person> Peers { get; set; } = new List<Person>();
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

[ApiController]
[Route("api/[controller]")]
public class OrgChartController : ControllerBase
{
    private readonly string _connectionString = "your_connection_string_here"; // Update with your connection string

    [HttpGet("{preferredID}")]
    public IActionResult GetOrgChart(string preferredID)
    {
        try
        {
            // Execute the stored procedure and get the data
            DataTable dataTable = GetDataFromStoredProcedure(_connectionString);

            // Build the structure
            OrgChart result = BuildStructure(dataTable, preferredID);

            // Return the result as JSON
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, ex.Message);
        }
    }

    private DataTable GetDataFromStoredProcedure(string connectionString)
    {
        DataTable dataTable = new DataTable();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            using (SqlCommand command = new SqlCommand("SEL_OrgChart", connection))
            {
                command.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adapter = new SqlDataAdapter(command);
                adapter.Fill(dataTable);
            }
        }

        return dataTable;
    }

    private OrgChart BuildStructure(DataTable dataTable, string preferredID)
    {
        Dictionary<string, Person> personDict = new Dictionary<string, Person>();
        Person selectedPerson = null;
        string directMgrPreferredID = null;
        OrgChart orgChart = new OrgChart();

        // Step 1: Create Person objects and store them in the dictionary
        foreach (DataRow row in dataTable.Rows)
        {
            string queryID = row["QueryID"].ToString();
            if (queryID == "OrgChart_Reports_Contractor")
                continue;

            string id = row["PreferredID"].ToString();

            if (!personDict.ContainsKey(id))
            {
                personDict[id] = new Person
                {
                    PersonID = Convert.ToInt32(row["PersonID"]),
                    PreferredID = id,
                    FirstNM = row["FirstNM"].ToString(),
                    LastNM = row["LastNM"].ToString(),
                    JobTitle = row["JobTitle"].ToString()
                };
            }

            if (id == preferredID)
            {
                selectedPerson = personDict[id];
                directMgrPreferredID = row["EmployeeMgrPreferredID"].ToString();
                orgChart.SelectedPerson = selectedPerson;
            }
        }

        // Step 2: Add the top-level managers (OrgChart_Managers) to the OrgChart
        foreach (DataRow row in dataTable.Rows)
        {
            if (row["QueryID"].ToString() == "OrgChart_Managers")
            {
                string id = row["PreferredID"].ToString();
                if (id != preferredID) // Exclude the selected person from managers
                {
                    orgChart.Managers.Add(new Person
                    {
                        PersonID = Convert.ToInt32(row["PersonID"]),
                        PreferredID = id,
                        FirstNM = row["FirstNM"].ToString(),
                        LastNM = row["LastNM"].ToString(),
                        JobTitle = row["JobTitle"].ToString()
                    });
                }
            }
        }

        // Step 3: Add the selected person and their peers to the OrgChart
        if (selectedPerson != null)
        {
            // Add peers (OrgChart_Peers)
            foreach (DataRow row in dataTable.Rows)
            {
                if (row["QueryID"].ToString() == "OrgChart_Peers" && row["EmployeeMgrPreferredID"].ToString() == directMgrPreferredID)
                {
                    string peerID = row["PreferredID"].ToString();
                    if (peerID != preferredID && personDict.ContainsKey(peerID))
                    {
                        Person peer = personDict[peerID];
                        orgChart.Peers.Add(peer);
                    }
                }
            }
        }

        return orgChart;
    }
}


